<?php


namespace SkylarkSoft\GoRMG\Commercial\Models;

use App\ModelCommonTrait;
use App\Models\BelongsToBuyer;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use SkylarkSoft\GoRMG\SystemSettings\Models\Buyer;
use SkylarkSoft\GoRMG\SystemSettings\Models\Country;
use SkylarkSoft\GoRMG\SystemSettings\Models\LienBank;

class ExportInvoice extends Model
{
    use SoftDeletes;
    use BelongsToBuyer;
    use ModelCommonTrait;

    protected $fillable = [
        'uniq_id',
        'export_lc_id',
        'sales_contract_id',
        'invoice_no',
        'buyer_id',
        'invoice_date',
        'exp_form_no',
        'exp_form_date',
        'applicant_id',
        'lien_bank_id',
        'beneficiary_id',
        'location',
        'country_id',
        'country_code',
        'remarks',
        'file',
        'bill_file',
        'cargo_delivery_to',
        'main_mark',
        'net_weight',
        'cbm',
        'place_of_delivery',
        'side_mark',
        'gross_weight',
        'invoice_value',
        'invoice_qty',
        'add_upcharge',
        'net_invoice_value',
        'discount_percentage',
        'annual_bonus_percentage',
        'claim_percentage',
        'commission_percentage',
        'other_deduction_percentage',
        'discount_amount',
        'bonus_amount',
        'claim_amount',
        'commission_amount',
        'other_deduction_amount',
        'factory_id',
        'created_by',
        'updated_by',
        'deleted_by',
        'notify_1',
        'notify_1_address',
        'notify_2',
        'notify_2_address',
        'also_notify',
        'also_notify_address',
    ];

    protected $appends = ['lc_sc_no'];

    public function getLcScNoAttribute()
    {
        return $this->exportLc()->count() ? $this->exportLc()->first()->lc_number : ($this->salesContract()->count() ? $this->salesContract()->first()->contract_number :  '--');
    }

    public function getInvoiceQtyAttribute()
    {
        return collect($this->details()->get())->sum('current_invoice_qty');
    }

    public function getInvoiceValueAttribute()
    {
        return collect($this->details()->get())->sum('current_invoice_value');
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::created(function ($model) {
            $model->uniq_id = getPrefix() . 'EI-' . date('y') . '-' . str_pad($model->id, 6, '0', STR_PAD_LEFT);
            $model->save();
        });
        static::saving(function ($model) {
            if (! $model->id) {
                $model->uniq_id = getPrefix() . 'EI-' . date('y') . '-' . str_pad($model->id, 6, '0', STR_PAD_LEFT);
            }
        });
    }

    public function details(): HasMany
    {
        return $this->hasMany(ExportInvoiceDetail::class, 'export_invoice_id');
    }

    public function shippingInformation(): HasOne
    {
        return $this->hasOne(ExportInvoiceShippingInformation::class, 'export_invoice_id');
    }

    public function buyer(): BelongsTo
    {
        return $this->belongsTo(Buyer::class, 'buyer_id')->withDefault();
    }

    public function applicant(): BelongsTo
    {
        return $this->belongsTo(Buyer::class, 'applicant_id')->withDefault();
    }

    public function exportLc(): BelongsTo
    {
        return $this->belongsTo(ExportLC::class, 'export_lc_id')->withDefault();
    }

    public function salesContract(): BelongsTo
    {
        return $this->belongsTo(SalesContract::class, 'sales_contract_id')->withDefault();
    }

    public function beneficiary(): BelongsTo
    {
        return $this->belongsTo(\SkylarkSoft\GoRMG\SystemSettings\Models\Factory::class, 'beneficiary_id')->withDefault();
    }

    public function lienBank(): BelongsTo
    {
        return $this->belongsTo(LienBank::class, 'lien_bank_id')->withDefault();
    }

    public function country(): BelongsTo
    {
        return $this->belongsTo(Country::class, 'country_id')->withDefault();
    }

    public function docSubmissionInvoice()
    {
        return $this->hasMany(DocumentSubmissionInvoice::class);
    }

}
